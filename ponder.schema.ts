import { createSchema } from "@ponder/core";

export default createSchema((p) => ({
  DomainEvent: p.createTable({
    id: p.string(),
    blockNumber: p.int(),
    domainId: p.string().references("Domain.id"),
    domain: p.string(),
    transactionID: p.string(),
  }),
  Transfer: p.createTable({
    id: p.string(),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
  }),
  NewOwner: p.createTable({
    id: p.string(),
    parentDomainId: p.string().references("Domain.id"),
    parentDomain: p.one("parentDomainId"),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
  }),
  NewResolver: p.createTable({
    id: p.string(),
    resolverId: p.string().references("Resolver.id"),
    resolver: p.one("resolverId"),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
  }),
  NewTTL: p.createTable({
    id: p.string(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
    ttl: p.bigint(),
  }),
  WrappedTransfer: p.createTable({
    id: p.string(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
  }),
  NameWrapped: p.createTable({
    id: p.string(),
    name: p.string().optional(),
    fuses: p.int(),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
    expiryDate: p.bigint(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
  }),
  NameUnwrapped: p.createTable({
    id: p.string(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
  }),
  FusesSet: p.createTable({
    id: p.string(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
    fuses: p.int(),
  }),
  ExpiryExtended: p.createTable({
    id: p.string(),
    domainEventId: p.string().references("DomainEvent.id"),
    domainEvent: p.one("domainEventId"),
    expiryDate: p.bigint(),
  }),
  WrappedDomain: p.createTable({
    id: p.string(),
    expiryDate: p.bigint(),
    fuses: p.int(),
    name: p.string().optional(),
    domainId: p.string().references("Domain.id"),
    domain: p.string(),
    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),
  }),
  Account: p.createTable({
    id: p.string(),
    wrappedDomains: p.many("WrappedDomain.ownerId"),
    registrations: p.many("Registration.registrantId"),
    domains: p.many("Domain.ownerId"),
  }),
  Resolver: p.createTable({
    id: p.string(),
    domainId: p.string().references("Domain.id"),
    domain: p.one("domainId"),
    addrId: p.string().references("Account.id"),
    addr: p.one("addrId"),
    contentHash: p.string().optional(),
    texts: p.string().list(),
    coinTypes: p.bigint().list(),
    events: p.many("ResolverEvent.resolverId"),
  }),
  ResolverEvent: p.createTable({
    id: p.string(),
    resolverId: p.string().references("Resolver.id"),
    resolver: p.one("resolverId"),
    blockNumber: p.int(),
    transactionID: p.string(),
  }),
  VersionChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    version: p.bigint(),
  }),
  AuthorisationChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    owner: p.string(),
    target: p.string(),
    isAuthorised: p.boolean(),
  }),
  InterfaceChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    interfaceId: p.string(),
    implementer: p.string(),
  }),
  ContenthashChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    hash: p.string(),
  }),
  TextChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    key: p.string(),
    value: p.string().optional(),
  }),
  PubkeyChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    x: p.string(),
    y: p.string(),
  }),
  AbiChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    contentType: p.string(),
  }),
  NameChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    name: p.string(),
  }),
  MulticoinAddrChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    coinType: p.bigint(),
    addr: p.string(),
  }),
  AddrChanged: p.createTable({
    id: p.string(),
    resolverEventId: p.string().references("ResolverEvent.id"),
    resolverEvent: p.one("resolverEventId"),
    addrId: p.string().references("Account.id"),
    addr: p.one("addrId"),
  }),
  RegistrationEvent: p.createTable({
    id: p.string(),
    registrationId: p.string().references("Registration.id"),
    registration: p.one("registrationId"),
    blockNumber: p.int(),
    transactionID: p.string(),
  }),
  Registration: p.createTable({
    id: p.string(),
    domainId: p.string().references("Domain.id"),
    domain: p.one("domainId"),
    registrationDate: p.bigint(),
    expiryDate: p.bigint(),
    cost: p.bigint().optional(),
    registrantId: p.string().references("Account.id"),
    registrant: p.one("registrantId"),
    labelName: p.string().optional(),
    events: p.many("RegistrationEvent.registrationId"),
  }),
  NameRegistered: p.createTable({
    id: p.string(),
    registrationEventId: p.string().references("RegistrationEvent.id"),
    registrationEvent: p.one("registrationEventId"),
    registrantId: p.string().references("Account.id"),
    registrant: p.one("registrantId"),
    expiryDate: p.bigint(),
  }),
  NameRenewed: p.createTable({
    id: p.string(),
    registrationEventId: p.string().references("RegistrationEvent.id"),
    registrationEvent: p.one("registrationEventId"),
    expiryDate: p.bigint(),
  }),
  NameTransferred: p.createTable({
    id: p.string(),
    registrationEventId: p.string().references("RegistrationEvent.id"),
    registrationEvent: p.one("registrationEventId"),
    newOwnerId: p.string().references("Account.id"),
    newOwner: p.one("newOwnerId"),
  }),
  Domain: p.createTable({
    id: p.string(),
    name: p.string().optional(),
    labelName: p.string().optional(),
    labelhash: p.string().optional(),
    parentId: p.string().references("Domain.id").optional(),
    parent: p.one("parentId"),
    subdomains: p.many("Domain.parentId"),
    subdomainCount: p.int(),
    resolvedAddressId: p.string().references("Account.id").optional(),
    resolvedAddress: p.one("resolvedAddressId"),
    resolverId: p.string().references("Resolver.id").optional(),
    resolver: p.one("resolverId"),
    ttl: p.bigint().optional(),
    isMigrated: p.boolean(),
    createdAt: p.bigint(),

    ownerId: p.string().references("Account.id"),
    owner: p.one("ownerId"),

    registrantId: p.string().references("Account.id").optional(),
    registrant: p.one("registrantId"),

    wrappedOwnerId: p.string().references("Account.id").optional(),
    wrappedOwner: p.one("wrappedOwnerId"),

    expiryDate: p.bigint().optional(),

    registration: p.one("Registration.domainId"),
    wrappedDomain: p.one("WrappedDomain.domainId"),

    events: p.many("DomainEvent.domainId"),
  }),
}));
